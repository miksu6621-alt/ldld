print('upd2_mobile_centered')

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
    Camera = workspace.CurrentCamera
end)

local Aiming = {
    FOV = 60,
    NPCs = false,
    Players = true,
    Enabled = true,
    ShowFOV = true,
    DynamicFOV = true,
    FOVColor = Color3.fromRGB(255, 255, 255),
    CurrentTarget = nil
}

local InternalFOV = Aiming.FOV
local FOVCircle = Drawing.new("Circle")

FOVCircle.NumSides = 20
FOVCircle.Transparency = 1
FOVCircle.Thickness = 2
FOVCircle.Color = Aiming.FOVColor
FOVCircle.Filled = false

-- Get screen center (for mobile)
local function GetScreenCenter()
    return Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end

local function UpdateFOV()
    if Aiming.ShowFOV then
        if Aiming.DynamicFOV then
            InternalFOV = Aiming.FOV * (70 / Camera.FieldOfView)
        else
            InternalFOV = Aiming.FOV
        end

        FOVCircle.Visible = true
        FOVCircle.Radius = InternalFOV
        FOVCircle.Color = Aiming.FOVColor
        FOVCircle.Position = GetScreenCenter()
    else
        FOVCircle.Visible = false
    end
end

local function GetCharactersInViewport()
    local ToProcess = {}
    local CharactersOnScreen = {}

    if Aiming.Players then
        for _, Player in next, Players:GetPlayers() do
            if Player == Players.LocalPlayer then continue end
            if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                table.insert(ToProcess, Player.Character)
            end
        end
    end

    if Aiming.NPCs then
        for _, NPC in next, game:GetService("CollectionService"):GetTagged("NPC") do
            if NPC:IsDescendantOf(workspace)
                and NPC:IsA("Model")
                and NPC:FindFirstChild("HumanoidRootPart")
                and game:GetService("CollectionService"):HasTag(NPC, "ActiveCharacter") then
                table.insert(ToProcess, NPC)
            end
        end
    end

    for _, Character in next, ToProcess do
        local Position, OnScreen = Camera:WorldToViewportPoint(Character.HumanoidRootPart.Position)
        if OnScreen then
            table.insert(CharactersOnScreen, {
                Character = Character,
                Position = Vector2.new(Position.X, Position.Y)
            })
        end
    end

    return CharactersOnScreen
end

local function DistanceFromCenter(Position)
    local center = GetScreenCenter()
    return (center - Position).Magnitude
end

local function GetPlayersInFOV()
    local Characters = GetCharactersInViewport()
    local PlayersInFOV = {}

    for _, Character in next, Characters do
        local Distance = DistanceFromCenter(Character.Position)
        if Distance <= InternalFOV then
            table.insert(PlayersInFOV, {
                Character = Character.Character,
                Distance = Distance,
                Position = Character.Position
            })
        end
    end

    return PlayersInFOV
end

local function GetClosestPlayer()
    local PlayersInFOV = GetPlayersInFOV()
    local ClosestPlayer = nil
    local ClosestDistance = math.huge

    for _, Player in next, PlayersInFOV do
        if Player.Distance < ClosestDistance then
            ClosestPlayer = Player.Character
            ClosestDistance = Player.Distance
        end
    end

    return ClosestPlayer
end

local Connection = RunService.RenderStepped:Connect(function()
    if Aiming.Enabled then
        UpdateFOV()
        Aiming.CurrentTarget = GetClosestPlayer()
    else
        FOVCircle.Visible = false
        Aiming.CurrentTarget = nil
    end
end)

local function Unload()
    Connection:Disconnect()
    FOVCircle:Remove()
end

Aiming.Unload = Unload

return Aiming
